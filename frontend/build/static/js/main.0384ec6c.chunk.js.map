{"version":3,"sources":["components/routes/HomeRoute.tsx","components/routes/SessionTasksRoute.tsx","components/routes/PageNotFoundRoute.tsx","components/AppRouter.tsx","providers/apolloClient.ts","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["HomeRoute","SessionTasksRoute","sessionId","useParams","GET_TASKS","gql","useQuery","variables","session","loading","error","data","tasks","map","task","title","id","PageNotFoundRoute","AppRouter","path","exact","children","ApolloClient","uri","process","API_URL","cache","InMemoryCache","App","client","apolloClient","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMASeA,EAPU,kBACvB,gCACE,2CACA,yC,0VCWJ,IAuCeC,EAvCW,WAAO,IACvBC,EAAcC,cAAdD,UACFE,EAAYC,cAAH,KAFe,EAmBGC,mBAA6BF,EAAW,CACvEG,UAAW,CAAEC,QAASN,KADhBO,EAnBsB,EAmBtBA,QAASC,EAnBa,EAmBbA,MAAOC,EAnBM,EAmBNA,KAIxB,GAAID,EAAO,OAAO,sDAClB,GAAID,IAAYE,EAAM,OAAO,mDAxBC,IA0BtBC,EAAUD,EAAVC,MAER,OACE,gCAAK,uCACH,6BACGA,EAAMC,KAAI,SAACC,GAAD,OACT,6BAAmBA,EAAKC,OAAfD,EAAKE,aCzCTC,EANW,WACxB,OACE,kDCASC,EAAY,kBACvB,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,sBAAsBC,OAAK,EAACC,SAAU,cAAC,EAAD,MAClD,cAAC,IAAD,CAAOF,KAAK,IAAIC,OAAK,EAACC,SAAU,cAAC,EAAD,MAChC,cAAC,IAAD,CAAOF,KAAK,IAAIE,SAAU,cAAC,EAAD,YCNjB,MAAIC,eAAa,CAC9BC,IAAKC,mIAAYC,SAAW,gCAC5BC,MAAO,IAAIC,kBCQEC,MARf,WACE,OACE,cAAC,iBAAD,CAAgBC,OAAQC,EAAxB,SACE,cAAC,EAAD,OCOSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0384ec6c.chunk.js","sourcesContent":["\n\nexport const HomeRoute = () => (\n  <div>\n    <h1>Home page</h1>\n    <p>dvdv</p>\n  </div>\n);\n\nexport default HomeRoute;\n","import { gql, useQuery } from '@apollo/client';\nimport { useParams } from \"react-router-dom\";\nimport { ITaskModel } from \"../../types/models\";\n\ninterface IParams {\n  sessionId: string\n}\n\ninterface IQuery {\n  tasks: ITaskModel[]\n}\n\ninterface IQueryVars {\n  session: string;\n}\n\nconst SessionTasksRoute = () => {\n  const { sessionId } = useParams<IParams>();\n  const GET_TASKS = gql`\n    query TasksQuery($session: String!) {\n      tasks: listTasks(session: $session) {\n        id\n        title\n        column\n        timesheet {\n          start\n          end\n        }\n        session {\n          name\n        }\n      }\n    }\n  `;\n\n  const { loading, error, data } = useQuery<IQuery, IQueryVars>(GET_TASKS, {\n    variables: { session: sessionId }\n  });\n\n  if (error) return <div>Error fetching data</div>;\n  if (loading || !data) return <div>Loading tasks...</div>;\n  \n  const { tasks } = data;\n\n  return (\n    <div><h3>Tasks</h3>\n      <ul>\n        {tasks.map((task) => \n          <li key={task.id}>{task.title}</li>\n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default SessionTasksRoute;\n","\nconst PageNotFoundRoute = () => {\n  return (\n    <div>Page not found</div>\n  )\n}\n\nexport default PageNotFoundRoute;\n","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport * as Routes from \"./routes\";\n\nexport const AppRouter = () => (\n  <Router>\n    <Switch>\n      <Route path=\"/s/:sessionId/tasks\" exact children={<Routes.SessionTasks />} />\n      <Route path=\"/\" exact children={<Routes.Home />} />\n      <Route path=\"/\" children={<Routes.PageNotFound />} />\n    </Switch>\n  </Router>\n);\n","import { ApolloClient, InMemoryCache } from '@apollo/client';\n\nexport default new ApolloClient({\n  uri: process.env.API_URL || 'http://localhost:5000/graphql',\n  cache: new InMemoryCache()\n});\n","import { AppRouter } from \"./AppRouter\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport apolloClient from \"../providers/apolloClient\";\n\nfunction App() {\n  return (\n    <ApolloProvider client={apolloClient}>\n      <AppRouter />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}